{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of Python Programming: Bayesian Estimation Exercise","provenance":[{"file_id":"180n60IYeYVKC2ezstd0WTZGmEidVHuA3","timestamp":1589479793591}],"collapsed_sections":["PxQym5lRPMqK"],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"i8LCREF0SX58","colab_type":"text"},"source":["<font color=\"green\">*To start working on this notebook, or any other notebook that we will use in the Moringa Data Science Course, we will need to save our own copy of it. We can do this by clicking File > Save a Copy in Drive. We will then be able to make edits to our own copy of this notebook.*</font>"]},{"cell_type":"markdown","metadata":{"id":"P5MVHbQjHkD0","colab_type":"text"},"source":["# Python Programming: Bayesian Estimation Exercise"]},{"cell_type":"markdown","metadata":{"id":"-J3rsf11HoWc","colab_type":"text"},"source":["## Examples"]},{"cell_type":"code","metadata":{"id":"K49hiWLkHfIZ","colab_type":"code","outputId":"0d4a232d-ac9c-4dba-8c66-878078c221bb","executionInfo":{"status":"ok","timestamp":1589552899719,"user_tz":-180,"elapsed":4645,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["# Example 1\n","# ---\n","# Determine the bias of a Thumbtack \n","# (A thumbtack is a short flat-headed pin, used for fastening paper to a wall or other surface.)\n","# ---\n","# \n","\n","# We shall use the excellent PyMC library. Let's install it\n","# We shall avoid going into the finer details of PyMC. Excellent documentation for PyMC \n","# can be found both in the PyMC docs as well as the book \"Probabilistic Programming and Bayesian methods for Hackers\" \n","# by Cam Davidson-Pilon's, which can be found online at \n","# http://camdavidsonpilon.github.io/Probabilistic-Programming-and-Bayesian-Methods-for-Hackers/.\n","!pip install pymc"],"execution_count":36,"outputs":[{"output_type":"stream","text":["Requirement already satisfied: pymc in /usr/local/lib/python3.6/dist-packages (2.3.8)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Wwpv2x0AIagZ","colab_type":"code","colab":{}},"source":["# For estimating theta, we shall first generate 30 samples from the Bernoulli distribution, \n","# where the controlling parameter has a value of 0.3 \n","# (which would correspond to roughly 30% of the generated values being 1, and the rest being 0).\n","\n","# Importing the libraries we will need\n","from pymc import *\n","from scipy.stats import bernoulli\n","import matplotlib.pyplot as plt\n","import pymc.Matplot as plott\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"V8STzJ76IuJh","colab_type":"code","colab":{}},"source":["# We attempt to find the parameters of the posterior distribution, and we've learnt that the posterior depends on the prior, as well the data. \n","# There are many choices of prior available to us, in this case we shall use the uniform prior. \n","# Since we have little idea about the bias of the thumbtack, we believe it can lie anywhere between 0 and 1.\n","# The PyMC model contains two variables. The first is a Uniform prior, which represents our belief \n","# that the value of the parameter can be anywhere between 0 and 1. \n","# The second is the Bernoulli variable, to which we provide data. The two variables are linked in a parent-child relationship, \n","# the Uniform prior is the designated parent of the Bernoulli variable.\n","# We use two types of PyMC variables: Stochastic (the uni_prior variable, which can take different values based on the parameter theta). \n","# Deterministic (such as 'bern', whose values are decided by its parents). Finally, all the variables in the model are wrapped in a Model object.\n","# For all variables where observed is not True, PyMC's simulations will tickle the value of the variable during the simulation \n","# and the value (of uni_prior in our case) will start to approximate its posterior values.\n","\n","from pymc import *\n","from scipy.stats import bernoulli\n","import matplotlib.pyplot as plt\n","import pymc.Matplot as plott\n","\n","# Samples drawn from the prior distribution show that the prior is uniformly distributed between 0 and 1 on the x axis.\n","def create_model(data):\n","    #create a uniform prior, the lower and upper limits of which are 0 and 1\n","    uni_prior = Uniform('uni_prior', lower=0,upper=1.0 )\n","    bern = Bernoulli('bern',p=uni_prior, value=data,observed=True)\n","    model=Model([uni_prior,bern])\n","    return model"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"v3CxgzS5JCPL","colab_type":"code","outputId":"e26d6102-0dde-491c-854e-0db94ad13e80","executionInfo":{"status":"ok","timestamp":1589552900604,"user_tz":-180,"elapsed":5400,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}},"colab":{"base_uri":"https://localhost:8080/","height":370}},"source":["# We now use a sampling method called Markov Chain Monte Carlo (hence the acronym MCMC). \n","# MCMC is one of the methods used to draw samples from the posterior distribution. \n","# We draw 5k samples, and draw a histogram of the samples (called traces in MCMC parlance).\n","# In Bayesian statistics, the parameter theta is represented as a random variable and not a single value.\n","\n","sample_size=30\n","\n","def get_traces(sample_size):\n","    data=bernoulli.rvs(0.3,size=sample_size)\n","    model=create_model(data)\n","    model.seed()\n","    mc1 = MCMC(model)\n","    mc1.sample(iter=5000,burn=1000)\n","    return mc1,mc1.trace('uni_prior')[:]\n","\n","mc1,traces=get_traces(sample_size)\n","plott.histogram(traces,\"uni_prior\")\n","\n","# We plot the posterior distribution of the parameter theta. We can see that the distribution has quite a bit of variance, \n","# and the peak of the distribution (indicated by a black vertical line) \n","# does not correspond to 0.3 (which is the true value of the parameter theta). \n","# The peak of the distribution hill is called a point estimate in Bayesian parlance, \n","# which is analogous to the \"best estimate\" if we want to represent the parameter theta as a single value."],"execution_count":39,"outputs":[{"output_type":"stream","text":["\r [-----------------100%-----------------] 5000 of 5000 complete in 0.2 sec"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pymc/MCMC.py:81: UserWarning: Instantiating a Model object directly is deprecated. We recommend passing variables directly to the Model subclass.\n","  warnings.warn(message)\n"],"name":"stderr"},{"output_type":"stream","text":["Generating histogram of uni_prior\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"k60gk5owJii3","colab_type":"code","outputId":"14c472ec-5bc5-454c-a9e8-6c972b823bb1","executionInfo":{"status":"ok","timestamp":1589552903891,"user_tz":-180,"elapsed":8669,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["# We then plot the posterior distribution for an increasing number of samples.\n","num_samples=[20,50,100,500,5000]\n","for i in num_samples:\n","    m,traces=get_traces(i)\n","    plott.histogram(traces,\"num samples = \"+str(i),datarange=(0,0.6))\n","    \n","# We can see that increasing the number of samples makes the distribution \"hill\" sharper, \n","# which indicates its growing confidence in its estimate of the parameter theta."],"execution_count":40,"outputs":[{"output_type":"stream","text":["\r [-----------------100%-----------------] 5000 of 5000 complete in 0.2 sec"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pymc/MCMC.py:81: UserWarning: Instantiating a Model object directly is deprecated. We recommend passing variables directly to the Model subclass.\n","  warnings.warn(message)\n"],"name":"stderr"},{"output_type":"stream","text":["Generating histogram of num samples = 20\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pymc/MCMC.py:81: UserWarning: Instantiating a Model object directly is deprecated. We recommend passing variables directly to the Model subclass.\n","  warnings.warn(message)\n"],"name":"stderr"},{"output_type":"stream","text":["\r [-----------------100%-----------------] 5000 of 5000 complete in 0.2 secGenerating histogram of num samples = 50\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pymc/MCMC.py:81: UserWarning: Instantiating a Model object directly is deprecated. We recommend passing variables directly to the Model subclass.\n","  warnings.warn(message)\n"],"name":"stderr"},{"output_type":"stream","text":["\r [-----------------100%-----------------] 5000 of 5000 complete in 0.2 secGenerating histogram of num samples = 100\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pymc/MCMC.py:81: UserWarning: Instantiating a Model object directly is deprecated. We recommend passing variables directly to the Model subclass.\n","  warnings.warn(message)\n"],"name":"stderr"},{"output_type":"stream","text":["\r [-----------------100%-----------------] 5000 of 5000 complete in 0.2 secGenerating histogram of num samples = 500\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pymc/MCMC.py:81: UserWarning: Instantiating a Model object directly is deprecated. We recommend passing variables directly to the Model subclass.\n","  warnings.warn(message)\n"],"name":"stderr"},{"output_type":"stream","text":[" [-----------------100%-----------------] 5000 of 5000 complete in 0.8 secGenerating histogram of num samples = 5000\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"pmIRumIeKEjO","colab_type":"code","colab":{}},"source":["# Example 2\n","# ---\n","# I tossed my coin 30  times, and it came up as heads  11  times. Is it biased?\n","# ---\n","# \n","\n","# Parameterized problem:\n","#\n","# \"I want to know  p , the probability of tossing heads. Given  n  tosses and  h  observed heads, \n","# is it probable that the value of  p  is close to  0.5  , say, in the interval  [0.48,0.52] ?\"\n","\n","# Prior:\n","# prior belief about parameter:  p∼Uniform(0,1) \n","# likelihood function:  data∼Bernoulli(p)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"X2QM-QOLKyU8","colab_type":"code","outputId":"7c8657b7-3f8a-40ef-a17a-b4d2b0a12fe8","executionInfo":{"status":"ok","timestamp":1589552903897,"user_tz":-180,"elapsed":8658,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["# Make the data needed for the problem.\n","from random import shuffle\n","total = 30\n","n_heads = 11\n","n_tails = total - n_heads\n","tosses = [1] * n_heads + [0] * n_tails\n","shuffle(tosses)\n","\n","# printing out data\n","print(tosses)"],"execution_count":42,"outputs":[{"output_type":"stream","text":["[0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"7dUGmGHlLJcl","colab_type":"code","colab":{}},"source":["# Creating a function to plot our tosses\n","#\n","from collections import Counter\n","def plot_coins():\n","    fig = plt.figure()\n","    ax = fig.add_subplot(1,1,1)\n","    ax.bar(list(Counter(tosses).keys()), list(Counter(tosses).values()))\n","    ax.set_xticks([0, 1])\n","    ax.set_xticklabels(['tails', 'heads'])\n","    ax.set_ylim(0, 20)\n","    ax.set_yticks(np.arange(0, 21, 5))\n","    return fig"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"AxFbx_d9LRVZ","colab_type":"code","outputId":"8d52746d-5de4-4599-c0bd-67b63e3e5c5f","executionInfo":{"status":"ok","timestamp":1589552908164,"user_tz":-180,"elapsed":985,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}},"colab":{"base_uri":"https://localhost:8080/","height":269}},"source":["# Plotting\n","fig = plot_coins()\n","plt.show()    "],"execution_count":44,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"wlJ3Gl10LZDe","colab_type":"code","outputId":"8fd42dae-f826-4866-9914-e461bd26336e","executionInfo":{"status":"ok","timestamp":1589539143032,"user_tz":-180,"elapsed":1665,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}},"colab":{"base_uri":"https://localhost:8080/","height":54}},"source":["# Context manager syntax. `coin_model` is **just** \n","# a placeholder\n","#\n","\"\"\" \n","with pm.Model() as coin_model: \n","    # Distributions are PyMC3 objects.\n","    # Specify prior using Uniform object.\n","    p_prior = pm.Uniform('p', 0, 1)  \n","    \n","    # Specify likelihood using Bernoulli object.\n","    like = pm.Bernoulli('likelihood', p=p_prior, \n","                        observed=tosses)  \n","                        # \"observed=data\" is key\n","                        # for likelihood\n","\"\"\"\n"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["' \\nwith Model() as coin_model: \\n    # Distributions are PyMC3 objects.\\n    # Specify prior using Uniform object.\\n    p_prior = Uniform(\\'p\\', 0, 1)  \\n    \\n    # Specify likelihood using Bernoulli object.\\n    like = Bernoulli(\\'likelihood\\', p=p_prior, \\n                        observed=tosses)  \\n                        # \"observed=data\" is key\\n                        # for likelihood\\n'"]},"metadata":{"tags":[]},"execution_count":31}]},{"cell_type":"code","metadata":{"id":"_EL9_vt36kST","colab_type":"code","colab":{}},"source":["# Samples drawn from the prior distribution show that the prior is uniformly distributed between 0 and 1 on the x axis.\n","def create_model(data):\n","    #create a uniform prior, the lower and upper limits of which are 0 and 1\n","    p_prior = Uniform('uni_prior', lower=0,upper=1.0 )\n","    like = Bernoulli('likelihood',p=p_prior, value=data,observed=True)\n","    model=Model([uni_prior,bern])\n","    return model"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"e4t5ITtzLZ0j","colab_type":"code","colab":{}},"source":["# Writing our model in PyMC3, hitting the MCMC Inference Button (TM)\n","# \n","with create_model:\n","    # don't worry about this:\n","    step = pm.Metropolis()\n","    \n","    # focus on this, the Inference Button:\n","    coin_trace = pm.sample(2000, step=step)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"jsUsq_fOLiQd","colab_type":"code","colab":{}},"source":["# Results\n","# \n","pm.traceplot(coin_trace)\n","plt.show()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"DgXHtntLLl3Q","colab_type":"code","colab":{}},"source":["# Interpreting based on posterior distributions\n","# \n","pm.plot_posterior(coin_trace[100:], color='#87ceeb', \n","                  rope=[0.48, 0.52], point_estimate='mean', \n","                  ref_val=0.5)\n","plt.show()\n","\n","# 95% highest posterior density (HPD) encompasses the region of practical equivalence (ROPE) \n","# thus we need to get more data. For more info (http://bit.ly/HPDandROPE)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"PxQym5lRPMqK","colab_type":"text"},"source":["## <font color=\"green\">Challenges</font>"]},{"cell_type":"code","metadata":{"id":"ptXS0oISPSuY","colab_type":"code","colab":{}},"source":["# Challenge 1\n","# ---\n","# I tossed my coin 50  times, and it came up as tails 29  times. Is it biased?\n","# --\n","# \n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"VlSieDF-RvNj","colab_type":"code","colab":{}},"source":["# Challenge 2\n","# ---\n","# Assume that we run an website for selling safari shoes and in order to bring people to our site, \n","# we deploy several digital marketing campaigns. \n","# These campaigns feature various ad images and captions, and are presented on a number of social networking websites. \n","# We want to present the ads that are the most successful. \n","# For the sake of simplicity, we can assume that the most successful campaign \n","# is the one that results in the highest click-through rate: the ads that are most likely to be clicked if shown.\n","# We introduce a new campaign called \"facebook-yellow-dress,\" a campaign presented to Facebook users featuring a yellow dress. \n","# The ad has been presented to 10 users so far, and 7 of the users have clicked on it. \n","# Determine the probability that the next user will click on the ad.\n","# --\n"],"execution_count":0,"outputs":[]}]}