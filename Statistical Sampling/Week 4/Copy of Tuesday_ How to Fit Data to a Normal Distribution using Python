{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of Tuesday: How to Fit Data to a Normal Distribution using Python","provenance":[{"file_id":"1o6K5t05zPmot-bjYn4BWzmBGWgVXkUxQ","timestamp":1589571993652}],"collapsed_sections":["yMT1v9f3OPY-"],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"zNHYvhDaR-xq","colab_type":"text"},"source":["To start working on this notebook, or any other notebook that we will use in the Moringa Data Science Course, we will need to save our own copy of it. We can do this by clicking File > Save a Copy in Drive. We will then be able to make edits to our own copy of this notebook."]},{"cell_type":"markdown","metadata":{"id":"A-w4CzgeOFgQ","colab_type":"text"},"source":["# Thursday: How to Fit Data to a Normal Distribution using Python"]},{"cell_type":"markdown","metadata":{"id":"e0-YbfchRuU5","colab_type":"text"},"source":["MLE is a technique that enables you to estimate the parameters of a certain random variable given only a sample by generating a distribution which makes the observed results the most likely to have occurred. "]},{"cell_type":"markdown","metadata":{"id":"Lc6LeeVZSVzk","colab_type":"text"},"source":["## Example"]},{"cell_type":"code","metadata":{"id":"pdwdUIbtNjPZ","colab_type":"code","colab":{}},"source":["# Example 1\n","# ---\n","# Let's see an example of MLE and distribution fitting with Python from a random sample.\n","# ---\n","# \n","\n","# Importing the libraries to be used\n","# \n","from scipy.stats import norm\n","import matplotlib.pyplot as plt\n","import numpy as np"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"5_zd1yNpO82Q","colab_type":"code","outputId":"b9adb74f-63f8-48ee-a6af-3229b5abd5a2","executionInfo":{"status":"ok","timestamp":1589572055728,"user_tz":-180,"elapsed":1907,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}},"colab":{"base_uri":"https://localhost:8080/","height":697}},"source":["# Generating an array of 200 random sample from a normal dist with \n","# mean 0 and stdv 1\n","#\n","random_sample = norm.rvs(loc=0,scale=1,size=200) \n","random_sample\n"],"execution_count":2,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([-0.52726809, -0.01773456,  0.73330998, -0.73940767,  0.94753472,\n","        0.81418132, -0.87555895, -0.02556486,  0.98936818, -0.77003015,\n","       -0.77326457, -0.35946148,  0.90790315, -0.0861017 ,  0.04382518,\n","       -0.50542634, -2.72374151,  1.79142352,  0.33088579,  0.29373453,\n","       -0.34224544,  0.19531679, -1.46867427, -0.32847766,  0.34048218,\n","        0.28117442, -0.03421759,  0.45872864, -1.39059086,  2.05290293,\n","       -1.54862818, -1.00052551,  0.3974916 , -0.02915374,  0.29111928,\n","        2.40247283, -0.3003325 ,  1.12592392, -0.31576077,  0.4017048 ,\n","        0.47945925,  0.24598973, -0.22583426, -0.59591269, -0.50690554,\n","       -0.09765094,  0.76694527, -0.04979818, -2.26834386, -0.47213627,\n","       -1.63535672, -0.84541286,  0.01669969, -1.2313676 ,  0.35070257,\n","       -2.02978746, -0.31624183,  0.78712887, -1.69097842,  0.21488981,\n","       -0.67567543,  1.93684806,  0.7874969 ,  0.42700994, -0.72257412,\n","       -1.02709155,  0.61493834,  1.64098204, -0.14327968, -0.1280498 ,\n","       -0.48077302,  1.03817612, -0.39410589,  0.30290685, -0.14507636,\n","       -0.44061735, -0.21593979,  1.47872018,  0.3897048 , -0.84718755,\n","       -1.26787972, -0.4897078 , -1.71744344,  0.40003952, -1.3833555 ,\n","       -1.49339744, -1.66842999, -1.09103364, -0.16870285, -1.62488069,\n","        0.77286438, -0.35617247,  0.61934331,  2.50962026, -1.90262413,\n","        1.20612868,  1.64884971,  2.32083928, -0.91318251, -1.95638226,\n","        0.64994599, -1.88297003, -1.20932173, -0.24753314, -0.11988343,\n","       -0.49061478,  0.74186956,  0.41635954, -0.52169908, -0.67888654,\n","        0.48188748,  0.48701815, -0.45981672, -1.53911927,  0.64785232,\n","        0.71069487, -0.28360731,  0.29799047,  1.06578603, -1.76850212,\n","        0.03659391, -0.06352252, -2.09798037,  1.32105238, -1.09667647,\n","        0.62573159, -0.62306312, -0.38988323, -0.83225707,  1.40994165,\n","        0.05675054,  1.60424839,  0.65750903, -0.26653167,  1.02984405,\n","       -0.04406809, -1.52407722,  1.89772503, -0.17507256, -0.70341421,\n","        1.75577802, -0.55668191,  0.11869122,  0.10697159, -0.85919078,\n","       -0.42160691, -2.33737611,  0.92236625,  0.3063339 ,  1.35006239,\n","        0.24550918,  0.29806675,  0.97728913,  0.10322412, -0.5383458 ,\n","       -1.23146221, -0.02385628, -0.75606405,  0.25410329, -0.73958342,\n","        0.14777727,  1.52626349, -0.18102422,  1.05088094, -1.09322962,\n","        0.0101106 ,  1.23189536, -1.00044325, -1.32497457,  1.53249016,\n","       -0.34966513, -0.790794  ,  0.62266557, -0.0623914 , -1.88727823,\n","        1.50453957, -0.30684856,  0.75199436, -0.05297654,  1.34659173,\n","       -0.97691012, -0.48627041,  2.51103704,  0.73461449,  0.03255052,\n","        0.75787187, -0.69428878, -0.09392013,  2.20989531,  0.22950602,\n","       -0.19550351, -0.83892498, -1.27546322, -0.46393206,  1.45305208,\n","       -0.1038547 , -1.17469046, -0.43766444,  1.73617048, -0.50893029])"]},"metadata":{"tags":[]},"execution_count":2}]},{"cell_type":"code","metadata":{"id":"fi3pUc1dPAAf","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"2293a591-96b8-49c3-c710-a0be4dee27d9","executionInfo":{"status":"ok","timestamp":1589572105563,"user_tz":-180,"elapsed":1397,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["# Distribution fitting\n","# norm.fit(data) returns a list of two parameters \n","# (mean, parameters[0] and std, parameters[1]) via a MLE approach \n","# to data, which should be in array form.\n","#\n","parameters = norm.fit(random_sample)\n","parameters"],"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(-0.05220615910267244, 1.0266399180074746)"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"code","metadata":{"id":"ZWdilEboPDid","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":357},"outputId":"0935969d-7a63-4d0f-ab27-b626c8a7cf44","executionInfo":{"status":"ok","timestamp":1589572144009,"user_tz":-180,"elapsed":10046,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["# now, parameters[0] and parameters[1] are the mean and \n","# the standard deviation of the fitted distribution\n","#\n","x = np.linspace(-5,5,100) \n","x"],"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([-5.        , -4.8989899 , -4.7979798 , -4.6969697 , -4.5959596 ,\n","       -4.49494949, -4.39393939, -4.29292929, -4.19191919, -4.09090909,\n","       -3.98989899, -3.88888889, -3.78787879, -3.68686869, -3.58585859,\n","       -3.48484848, -3.38383838, -3.28282828, -3.18181818, -3.08080808,\n","       -2.97979798, -2.87878788, -2.77777778, -2.67676768, -2.57575758,\n","       -2.47474747, -2.37373737, -2.27272727, -2.17171717, -2.07070707,\n","       -1.96969697, -1.86868687, -1.76767677, -1.66666667, -1.56565657,\n","       -1.46464646, -1.36363636, -1.26262626, -1.16161616, -1.06060606,\n","       -0.95959596, -0.85858586, -0.75757576, -0.65656566, -0.55555556,\n","       -0.45454545, -0.35353535, -0.25252525, -0.15151515, -0.05050505,\n","        0.05050505,  0.15151515,  0.25252525,  0.35353535,  0.45454545,\n","        0.55555556,  0.65656566,  0.75757576,  0.85858586,  0.95959596,\n","        1.06060606,  1.16161616,  1.26262626,  1.36363636,  1.46464646,\n","        1.56565657,  1.66666667,  1.76767677,  1.86868687,  1.96969697,\n","        2.07070707,  2.17171717,  2.27272727,  2.37373737,  2.47474747,\n","        2.57575758,  2.67676768,  2.77777778,  2.87878788,  2.97979798,\n","        3.08080808,  3.18181818,  3.28282828,  3.38383838,  3.48484848,\n","        3.58585859,  3.68686869,  3.78787879,  3.88888889,  3.98989899,\n","        4.09090909,  4.19191919,  4.29292929,  4.39393939,  4.49494949,\n","        4.5959596 ,  4.6969697 ,  4.7979798 ,  4.8989899 ,  5.        ])"]},"metadata":{"tags":[]},"execution_count":6}]},{"cell_type":"code","metadata":{"id":"3wZYCnOOPGoL","colab_type":"code","colab":{}},"source":["# Generateing the pdf - probability density function (fitted distribution)\n","# \n","fitted_pdf = norm.pdf(x,loc = parameters[0],scale = parameters[1])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"mLdeVwI4PXGA","colab_type":"code","colab":{}},"source":["# Generating the pdf - probability density function (normal distribution non fitted)\n","# \n","normal_pdf = norm.pdf(x)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"qfe3rU_VPPu2","colab_type":"code","outputId":"64596173-6e37-453b-f66c-3a24f36d702e","executionInfo":{"status":"ok","timestamp":1589572453695,"user_tz":-180,"elapsed":54004,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}},"colab":{"base_uri":"https://localhost:8080/","height":281}},"source":["# Then finally displaying our plot\n","# \n","plt.plot(x,fitted_pdf,\"red\",label=\"Fitted normal dist\",linestyle=\"dashed\", linewidth=2)\n","plt.plot(x,normal_pdf,\"blue\",label=\"Normal dist\", linewidth=2)\n","plt.hist(random_sample,density=True,color=\"cyan\",alpha=.3) #alpha, from 0 (transparent) to 1 (opaque)\n","plt.title(\"Normal distribution fitting\") \n","plt.legend() \n","plt.show()"],"execution_count":11,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"yMT1v9f3OPY-","colab_type":"text"},"source":["## <font color=\"green\">Challenges</font>"]},{"cell_type":"code","metadata":{"id":"Jqfp3FHiOYAf","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":119},"outputId":"8a14a576-a6c9-4141-cd40-0f04909ecf64","executionInfo":{"status":"ok","timestamp":1589572513752,"user_tz":-180,"elapsed":6343,"user":{"displayName":"paul mwaura","photoUrl":"","userId":"05571276976991411894"}}},"source":["# Challenge 1\n","# ---\n","# Generate a random sample of size 50 and fit the data to a normal distribution\n","# ---\n","# \n","random_sample = norm.rvs(loc=0,scale=1,size=50) \n","\n","# Fitting the random samples\n","#\n","parameters = norm.fit(random_sample)\n","print(\"Parameters\",parameters)\n","\n","# \n","x = np.linspace(0, 1.5, 30)\n","print(x)\n"],"execution_count":13,"outputs":[{"output_type":"stream","text":["Parameters (0.22858341840613053, 1.0395971565339157)\n","[0.         0.05172414 0.10344828 0.15517241 0.20689655 0.25862069\n"," 0.31034483 0.36206897 0.4137931  0.46551724 0.51724138 0.56896552\n"," 0.62068966 0.67241379 0.72413793 0.77586207 0.82758621 0.87931034\n"," 0.93103448 0.98275862 1.03448276 1.0862069  1.13793103 1.18965517\n"," 1.24137931 1.29310345 1.34482759 1.39655172 1.44827586 1.5       ]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"APV3ife_Rguu","colab_type":"code","outputId":"12d52373-4929-4f62-f17b-510d562010d5","executionInfo":{"status":"ok","timestamp":1566264264417,"user_tz":-180,"elapsed":882,"user":{"displayName":"Jedidah Ochieng'","photoUrl":"","userId":"14278435719337316658"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["# Challenge 2\n","# ---\n","# Fit the following data to a normal distribution\n","# ---\n","# 7.62 6.30 5.83 6.50 8.34 9.81 7.10 6.80 5.90 7.89 6.50 5.52 7.90 6.30 9.10\n","# ---\n","# \n","from sklearn.preprocessing import StandardScaler\n","#data = np.array[(7.62, 6.30), (5.83, 6.50), (8.34, 9.81), (7.10, 6.80), (5.90, 7.89), (6.50, 5.52), (7.90, 6.30)] #, 9.10]\n","data = (7.62, 6.30, 5.83, 6.50, 8.34, 9.81, 7.10, 6.80, 5.90, 7.89, 6.50, 5.52, 7.90, 6.30, 9.10)\n","scaler = StandardScaler()\n","#print(scaler.fit(data))\n","StandardScaler(copy=True, with_mean=True, with_std=True)\n"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["StandardScaler(copy=True, with_mean=True, with_std=True)"]},"metadata":{"tags":[]},"execution_count":22}]},{"cell_type":"code","metadata":{"id":"HzGvpPXblUcm","colab_type":"code","colab":{}},"source":["x = np.array([7.62, 6.30, 5.83, 6.50, 8.34, 9.81, 7.10, 6.80, 5.90, 7.89, 6.50, 5.52, 7.90, 6.30, 9.10])\n","normal_data = np.linspace(4, 10, 100)\n","parameters = norm.fit(normal_data)\n","norm_mean = parameters[0]\n","norm_std = parameters[1]"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"6tHkQHd8qG_w","colab_type":"code","outputId":"9b718183-49c1-4ca6-e127-088b2ad0c35b","executionInfo":{"status":"error","timestamp":1566265821227,"user_tz":-180,"elapsed":1466,"user":{"displayName":"Jedidah Ochieng'","photoUrl":"","userId":"14278435719337316658"}},"colab":{"base_uri":"https://localhost:8080/","height":660}},"source":["\n","x = np.array([7.62, 6.30, 5.83, 6.50, 8.34, 9.81, 7.10, 6.80, 5.90, 7.89, 6.50, 5.52, 7.90, 6.30, 9.10])\n","\n","normal_data = np.linspace(4, 10, 100)\n","parameters = norm.fit(normal_data)\n","norm_mean = parameters[0]\n","norm_std = parameters[1]\n","\n","x_fitted = norm.pdf(x, loc = norm_mean, scale = norm_std)\n","x_norm = norm.pdf(x)\n","\n","plt.plot(x, x_fitted,color = 'r', label = 'x fitted')\n","plt.plot(x, x_norm, color='b', label='x_normal')\n","plt.scatter(x_fitted,normal_data,density=1,color=\"cyan\", alpha=.3)\n","#x, y, s=area, c=colors, alpha=0.5\n","plt.legend()\n","plt.show()"],"execution_count":0,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-30-b705e872c041>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx_fitted\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcolor\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'r'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'x fitted'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx_norm\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolor\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'b'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'x_normal'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 14\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscatter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_fitted\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mnormal_data\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mdensity\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcolor\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"cyan\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0malpha\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m.3\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     15\u001b[0m \u001b[0;31m#x, y, s=area, c=colors, alpha=0.5\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     16\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlegend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/matplotlib/pyplot.py\u001b[0m in \u001b[0;36mscatter\u001b[0;34m(x, y, s, c, marker, cmap, norm, vmin, vmax, alpha, linewidths, verts, edgecolors, data, **kwargs)\u001b[0m\n\u001b[1;32m   2860\u001b[0m         \u001b[0mvmin\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mvmin\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvmax\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mvmax\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0malpha\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0malpha\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlinewidths\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlinewidths\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2861\u001b[0m         verts=verts, edgecolors=edgecolors, **({\"data\": data} if data\n\u001b[0;32m-> 2862\u001b[0;31m         is not None else {}), **kwargs)\n\u001b[0m\u001b[1;32m   2863\u001b[0m     \u001b[0msci\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m__ret\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2864\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0m__ret\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/matplotlib/__init__.py\u001b[0m in \u001b[0;36minner\u001b[0;34m(ax, data, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1808\u001b[0m                         \u001b[0;34m\"the Matplotlib list!)\"\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mlabel_namer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__name__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1809\u001b[0m                         RuntimeWarning, stacklevel=2)\n\u001b[0;32m-> 1810\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1811\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1812\u001b[0m         inner.__doc__ = _add_data_doc(inner.__doc__,\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/matplotlib/axes/_axes.py\u001b[0m in \u001b[0;36mscatter\u001b[0;34m(self, x, y, s, c, marker, cmap, norm, vmin, vmax, alpha, linewidths, verts, edgecolors, **kwargs)\u001b[0m\n\u001b[1;32m   4180\u001b[0m         \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mravel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4181\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msize\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msize\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4182\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"x and y must be the same size\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4183\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4184\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0ms\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: x and y must be the same size"]},{"output_type":"display_data","data":{"image/png":"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\nYYL7VVe5d+7sXqGCO0O9+0EHuZ96qvtdd7m/9577hg0l066yJDOTf7/9+7ubuZcv737++e6zZ0e7\nZXnLzHR/8UX3KlXcGzRw/+STwp1n+3b3SZPczzrLvWpV/puqV899yBD3JUsi22aJGQBSvQCxNurB\nPudXiQT/9HT3O+9kUDjsMPcffii+98rMdF+6lP8Zhw9379nTvVq1YKCvWdP9uOPcb77ZfepU95Ur\nS64TihfLlrn/61/uNWrwd969u/vkye5padFuWe5++sm9bVv++7z9dvd9+wp/rp073d96ix1f9ers\nBGbNilxbJWYo+Odn7Vr3Y4/lRx882P2vvyJ7/nXr3N9+2/2229xPPNG9bt1goK9Uyf3oo92vucZ9\n4kT3xYvdMzIi+/6St+3b3Z94wr1VK/59NG7sfv/97ps3R7tl+/vrL/dLL2U7e/VyX7Om6OdcssT9\n0EN5Z/Huu0U/n8QUBf8D+fBD98RE3gq/9FLRz7dli/vHH7uPHu1+xhnujRoFA31CgnuHDu6XX+7+\n3HPu8+bF7pVmvMnIYPDr04d/V1WquA8dyivuWDNxIu8U69d3/+CDop9vwwb3pCT3cuXcn3++6OeT\nmKHgn5u0NKZVAPcjj+QVd0Ht3Ok+c6b7Y4+5n3de8Oox66t1a95aP/64+9df83iJfT/+yMBfuTL/\nHvv0YccQS3dkixfz3y3Af8dFvYjYscP95JN5vrvuUpqxjFDwz2nlSvfkZH7UK69037Ur/9ekpbnP\nnev+7LPul13m3r49r5SyAn2jRu4DBrjfdx8H5bZsiWybpeRt2sS/z6y7t9atmSLavj3aLaNdu/jv\nF+C/55Uri3a+tDT3Sy7h+YYOLdq4gsQEBf9Q77zjXqcOB/omT879mIwM90WL3F9+2X3YMPdu3Zib\nzwr0deu6n3QSB97eeYc5fSm70tI4OH/00f6/Afnrr3dfvjzaLaNJk/jvuU4d9+nTi3auzEyOTQHu\np52mu9VSTsHf3X3vXs7uADiNMmt6W2am+2+/ub/5pvtNN3HgN2sGCMDcaq9e7jfcwM5i2TLdEsez\nWbOY4itfnnd+Z5zh/vnn0f83sWSJe6dO/Dc7fDj/vRfF009zZtHRR/MOSEqlggb/srfIa9kylmhI\nTeXWi2efnX3x1KZNPK5CBa6IDV04ddhhWhEp+1u7Fnj6aeC551j7qUMHrh4+77zorajeu5fVQZ98\n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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"4KvmFUlBqHG5","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"qr4UVwwrqHQM","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"lH5SncsVOZyB","colab_type":"code","colab":{}},"source":["# Challenge 3\n","# ---\n","# A manufacturing company produces steel housings for electrical equipment. \n","# The main component part of the housing is a steel trough that is made out of a 14-gauge steel coil. \n","# It is produced using a 250-ton progressive punch press with a wipe-down operation that puts \n","# two 90-degree forms in the flat steel to make the trough. \n","# The distance from one side of the form to the other is critical because of weatherproofing in outdoor applications. \n","# The company requires that the width of the trough be between 8.31 inches and 8.61 inches. \n","# Below is the widths of the troughs, in inches, for a sample of n = 49.\n","# Fit the given data to a normal distibution\n","# ---\n","# 8.312 8.343 8.476 8.382 8.436 8.413 8.460 8.444 8.396 8.447\n","# 8.317 8.383 8.484 8.403 8.489 8.414 8.429 8.460 8.405 8.439\n","# 8.348 8.410 8.351 8.414 8.419 8.385 8.481 8.415 8.479 8.412 8.420 8.410 8.411 8.427 8.420\n","# 8.373 8.481 8.465 8.498 8.429 8.458 8.405 8.323 8.498 8.409\n","# 8.422 8.447 8.462 8.420\n","# ---\n","#\n","OUR CODE GOES HERE"],"execution_count":0,"outputs":[]}]}